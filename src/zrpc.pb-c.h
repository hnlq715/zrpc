/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: src/zrpc.proto */

#ifndef PROTOBUF_C_src_2fzrpc_2eproto__INCLUDED
#define PROTOBUF_C_src_2fzrpc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Zrpc__Request Zrpc__Request;
typedef struct _Zrpc__Reply Zrpc__Reply;


/* --- enums --- */

typedef enum _Zrpc__Reply__Status {
  ZRPC__REPLY__STATUS__OK = 1,
  ZRPC__REPLY__STATUS__APPLICATION_ERROR = 2,
  ZRPC__REPLY__STATUS__NETWORK_ERROR = 3
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(ZRPC__REPLY__STATUS)
} Zrpc__Reply__Status;
typedef enum _Zrpc__Reply__ApplicationError {
  ZRPC__REPLY__APPLICATION_ERROR__INVALID_GENERIC_WRAPPER = -1,
  ZRPC__REPLY__APPLICATION_ERROR__UNKNOWN_SERVICE = -2,
  ZRPC__REPLY__APPLICATION_ERROR__UNKNOWN_METHOD = -3,
  ZRPC__REPLY__APPLICATION_ERROR__INVALID_MESSAGE = -4
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(ZRPC__REPLY__APPLICATION_ERROR)
} Zrpc__Reply__ApplicationError;

/* --- messages --- */

struct  _Zrpc__Request
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event_id;
  int64_t event_id;
  protobuf_c_boolean has_deadline;
  int32_t deadline;
  char *service;
  char *method;
  protobuf_c_boolean has_payload;
  ProtobufCBinaryData payload;
};
#define ZRPC__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zrpc__request__descriptor) \
    , 0,0, 0,0, NULL, NULL, 0,{0,NULL} }


struct  _Zrpc__Reply
{
  ProtobufCMessage base;
  protobuf_c_boolean has_status;
  Zrpc__Reply__Status status;
  protobuf_c_boolean has_application_error;
  int32_t application_error;
  char *error;
  protobuf_c_boolean has_payload;
  ProtobufCBinaryData payload;
};
#define ZRPC__REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zrpc__reply__descriptor) \
    , 0,ZRPC__REPLY__STATUS__OK, 0,0, NULL, 0,{0,NULL} }


/* Zrpc__Request methods */
void   zrpc__request__init
                     (Zrpc__Request         *message);
size_t zrpc__request__get_packed_size
                     (const Zrpc__Request   *message);
size_t zrpc__request__pack
                     (const Zrpc__Request   *message,
                      uint8_t             *out);
size_t zrpc__request__pack_to_buffer
                     (const Zrpc__Request   *message,
                      ProtobufCBuffer     *buffer);
Zrpc__Request *
       zrpc__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zrpc__request__free_unpacked
                     (Zrpc__Request *message,
                      ProtobufCAllocator *allocator);
/* Zrpc__Reply methods */
void   zrpc__reply__init
                     (Zrpc__Reply         *message);
size_t zrpc__reply__get_packed_size
                     (const Zrpc__Reply   *message);
size_t zrpc__reply__pack
                     (const Zrpc__Reply   *message,
                      uint8_t             *out);
size_t zrpc__reply__pack_to_buffer
                     (const Zrpc__Reply   *message,
                      ProtobufCBuffer     *buffer);
Zrpc__Reply *
       zrpc__reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zrpc__reply__free_unpacked
                     (Zrpc__Reply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Zrpc__Request_Closure)
                 (const Zrpc__Request *message,
                  void *closure_data);
typedef void (*Zrpc__Reply_Closure)
                 (const Zrpc__Reply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor zrpc__request__descriptor;
extern const ProtobufCMessageDescriptor zrpc__reply__descriptor;
extern const ProtobufCEnumDescriptor    zrpc__reply__status__descriptor;
extern const ProtobufCEnumDescriptor    zrpc__reply__application_error__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_src_2fzrpc_2eproto__INCLUDED */
